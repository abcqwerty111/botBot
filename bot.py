# -*- coding: utf-8 -*-
import telebot
from telebot import *
import time

try:
	bot = telebot.TeleBot('907171461:AAHpZEmfC3dVCNYC-G7N11zhiQMib7YwxVY')

	@bot.message_handler(content_types = ['text'])
	@bot.edited_message_handler(content_types = ['text'])
	def send_echo(message):

		mt = message.text
		mid = message.chat.id
		name = message.from_user.first_name
		akzhol = 'Акжол, иди наxуй'
		zhaka = 'Жака, иди нахуй'

		mt = mt.lower()
		if mid == 440897393:
			bot.send_message(mid, akzhol)
		elif mid == 350839674:
			bot.send_message(mid, zhaka)
		else:

			if 'развитие' in mt:
				answer = '''
Развитие исследований в области искусственного интеллекта

Термин «artificialintelligence» был предложен в 1956 году на семинаре, посвященном разработке методов решения логических задач, в городе Ганновере, США.
Более научное определение гласит, что искусственный интеллект, или ИИ, представляет собой направление исследований, «целью которого является разработка аппаратно-программных средств, позволяющих пользователю-непрограммисту ставить и решать свои, традиционно считающиеся интеллектуальными задачи, общаясь с ЭВМ на ограниченном подмножестве естественного языка» [1]. Существуют два основных подхода к исследованию ИИ: нейрокибернетика и кибернетика «черного ящика».
Первый подход основан на том, что мыслить способен исключительно человеческий мозг, поэтому для создания ИИ необходимо воссоздать его структуру. Подобные системы называют нейронными сетями. Особое внимание уделяется биологическому аспекту. Предполагается, что открытие биологической обработки информации позволит совершить невиданный скачок в развитии [2]. Поэтому нейрокибернетика, необходимость применения которой многократно возрастает при решении плохо формализованных задач, имеет большую популярность в наше время. Так, ученым из Цюриха удалось создать постоянную память на основе ДНК. Тем не менее, и без биологической обработки информации создаются и развиваются самообучающиеся (использующие уже накопленный опыт) нейронные сети, заточенные, например, под распознавание образов. Второй же подход гласит, что неважно то, как будет устроен ИИ, а важно лишь то, что он должен преобразовать данные как человеческий мозг. Большое внимание в данном подходе уделяется решению интеллектуальных задач. Именно из-под его крыла появились первые системы, основанные на знаниях, которые также называются экспертными системами. Они представляют собой набор знаний высококлассных специалистов определенных предметных областей, который будет в дальнейшем использоваться менее квалифицированными специалистами.
Существуют огромное число направлений исследований в области искусственного интеллекта. К их числу, например, относятся:
 - Представление знаний и разработка система, основанных на знаниях.
 - Программное обеспечение систем ИИ.
 - Разработка естественно-языковых интерфейсов и машинный перевод.
 - Интеллектуальные роботы.
 - Обучение и самообучение.'''
				bot.send_message(mid, answer)
				
			elif 'теория' in mt:
				answer = '''
Теория и практика искусственного интеллекта

История искусственного интеллекта, как учение о развитии современной науки и технологии создания интеллектуальных машин, имеет свои корни в ранних философских исследованиях природы человека и процесса познания мира, расширенных позднее нейрофизиологами и психологами в виде ряда теорий относительно работы человеческого мозга и мышления. Современной стадией развития науки об искусственном интеллекте является развитие фундамента математической теории вычислений — теории алгоритмов — и создание компьютеров.
Как прикладная наука «Искусственный интеллект» имеет теоретическую и экспериментальную части. Практически, проблема создания «Искусственного интеллекта» находится на стыке информатики и вычислительной техники — с одной стороны, с нейрофизиологией, когнитивной и поведенческой психологией — с другой стороны. Теоретической основой должна служить Философия искусственного интеллекта, но только с появлением зна́чимых результатов теория приобретёт самостоятельное значение. Пока, теорию и практику «Искусственного интеллекта» следует отличать от математических, алгоритмических, робототехнических, физиологических и прочих теоретических дисциплин и экспериментальных методик, имеющих самостоятельное значение.
В 1943 году в своей статье «Логическое исчисление идей, относящихся к нервной активности» У. Мак-Каллок и У. Питтс предложили понятие искусственной нейронной сети. В частности, ими была предложена модель искусственного нейрона. Д. Хебб в работе «Организация поведения»[5] 1949 года описал основные принципы обучения нейронов. Эти идеи несколько лет спустя развил американский нейрофизиолог Фрэнк Розенблатт. Он предложил схему устройства, моделирующего процесс человеческого восприятия, и назвал его «перцептроном».
Наибольшее число молодых инновативных фирм, разрабатывающих ИИ, находятся в США, Европе, Китае, Израиле, Великобритании, Канаде. Среди компаний, зарегистрировавших наибольшее число патентов в области ИИ находятся IBM, Microsoft, Toshiba, Samsung, NEC, Fujitsu, Hitachi, Panasonic, Canon
'''
				bot.send_message(mid, answer)
					
			elif 'интеллектуальные' in mt:
				answer = '''
Интеллектуальные информационные системы

Интеллектуальная информационная система (ИИС) - комплекс программных, лингвистических и логико-математических средств для реализации основной задачи – осуществления поддержки деятельности человека и поиска информации в режиме продвинутого диалога на естественном языке.[1] ИИС являются разновидностью интеллектуальной системы, а также одним из видов информационных систем.
Классификация ИИС
 - Экспертные системы
 - Собственно экспертные системы (ЭС)
 - Интерактивные баннеры (web + ЭС)
 - Вопросно-ответные системы (в некоторых источниках «системы общения»)
 - Интеллектуальные поисковики (например, система Старт)
 - Виртуальные собеседники
 - Виртуальные цифровые помощники
 - Обеспечение работы ИИС
 - Математическое
 - Лингвистическое
 - Информационное
 - Семантическое
 - Программное
 - Техническое
 - Технологическое
 - Кадровое
 - Классификация задач, решаемых ИИС
 - Интерпретация данных. 
 - Диагностика.
 - Мониторинг. 
 - Проектирование. 
 - Прогнозирование. 
 - Планирование. 
 - Обучение.
 - Управление.
 - Поддержка принятия решений.'''
				bot.send_message(mid, answer)

			elif 'основные' in mt:
				keyboard = types.InlineKeyboardMarkup()
				callback_button1 = types.InlineKeyboardButton(text="Основные компоненты интеллектуальной информационной системы", callback_data="rassul4")
				callback_button2 = types.InlineKeyboardButton(text="Основные определения нечетких множеств.", callback_data="mad15")
				keyboard.add(callback_button1)
				keyboard.add(callback_button2)
				bot.send_message(mid, "Выбери", reply_markup=keyboard)

			elif 'экспертные' in mt:
				answer = '''
Экспертные системы – основная разновидность интеллектуальных систем.

Название «экспертная система» происходит из термина «экспертная система, базирующаяся на знаниях». Экспертная система (ЭС) – это система, которая использует человеческие знания, встраиваемые в компьютер, для решения задач, которые обычно требуют человеческой экспертизы. Хорошо разработанные системы имитируют процесс рассуждения экспертов, используя это для решения специфических задач.
Такие системы могут использоваться не экспертом для улучшения их способностей и возможностей в решении задач определенного класса в конкретной предметной области. ЭС могут быть также использованы для распространения источников редких знаний. В конечном счете, такие системы могут функционировать лучше, чем некоторые отдельные эксперты - люди при выработке решения или суждения в специфической, обычно узкой области экспертизы. Эта возможность может иметь значительное влияние как на деятельность таких профессиональных консультантов, как финансовые аналитики, юристы, аудиторы и др., так и на организации и их менеджмент.
Основными понятиями ЭС являются: экспертиза, эксперты, проведение экспертизы, вывод и объяснительные способности.
Экспертиза – это обширное, специфическое знание для решения задачи, извлеченное из обучения, чтения и опыта. Следующие типы знаний являются примерами того, что включает себя экспертиза:
- теории о проблемной области;
- правила и процедуры относительно проблемной области;
- правила (эвристики) о том, что делать в данной проблемной ситуации;
- глобальные стратегии для решения таких типов задач;
- мета - знания (знания о знаниях);
- факты о проблемной области
Эти типы знаний дают возможность ЛПР принимать решения лучше и быстрее при решении сложных задач.
Эксперты. Трудно дать определение понятию эксперт, т.к. мы в действительности говорим о разных степенях или уровнях экспертизы. Вопросом является также каким объемом экспертных знаний в данной области и какими навыками должен обладать, чтобы быть квалифицированным в качестве эксперта?
Проведение экспертизы. Целью ЭС является проведение экспертизы путем аккумуляции знаний от экспертов и предоставлению их другим людям (неэкспертам). В этот процесс вовлечены четыре вида деятельности: извлечение знаний (из экспертов или других источников), представление знаний (в компьютере), вывод знаний и передача знаний пользователю. Знания хранятся в компьютере в базе знаний (БЗ).
Вывод. Уникальной чертой ЭС является их способность рассуждать («думать»). Имеется в виду, что необходимые знания для экспертизы хранятся в БЗ, программа может иметь доступ к соответствующим данным в БД, а ЭС может делать логический вывод, получая нужное знание, зачастую не хранящееся в явном виде в БЗ. Процесс вывода осуществляется составляющей системы, которая называется машина вывода.
Способность объяснять. Другой уникальной чертой ЭС является ее способность объяснять свои советы или рекомендации. Объяснение и обоснование производятся подсистемой объяснений. Она дает возможность системе проверять свои рассуждения и объяснять их действия.'''
				bot.send_message(mid, answer)

			elif 'функциональные' in mt:
				answer = '''
Функциональные возможности и характеристика ЭС.

Основными характеристиками ЭС являются:
- накопление и организация знаний – одна из самых важных характеристик ЭС;
- знания – основа ЭС, они являются явнымиидоступными, что отличает эти системы от большинства традиционных программ;
- ЭС применяет для решения проблем высококачественный опытквалифицированных экспертов. Именно высококачественный опыт в сочетании с умением его применять делает системы рентабельной. Этому также способствует гибкость системы;
- Наличие прогностических способностей. ЭС может объяснить каким образом новая ситуация привела к изменениям;
- Ведущие специалисты уходят, но их опыт остается и используется в ЭС
- ЭС можно использовать для обучения и тренировки.
Если искусственная компетентность настолько лучше человеческой, почему бы полностью не отказаться от экспертов – людей, заменив их ЭС? О несостоятельности подобных предложений и рассуждений говорят много доводов. Приведем некоторые из них:
- Хотя ЭС хорошо справляются со своей работой, но в некоторых областях деятельности человеческая компетентность превосходит любую искусственную. Это не есть отражение фундаментальных ограничений ИИ, но характерно для современного его состояния. Например, область творчества.
- Обучение: человеческая компетентность пока превосходит искусственную. Эксперты адаптируются к изменяющимся условиям, приспосабливают свои стратегии к новым обстоятельствам. ЭС мало приспособлены к обучению новым концепциям и правилам. Обучающие программы разработаны для простых задач и мало пригодны, когда требуется учитывать всю сложность реальных задач.
- Эксперты могут непосредственно воспринимать комплекс входной сенсорной информации (визуальной, звуковой, осязательной, обонятельной и тактильной). ЭС – только символы. Хотя в отдельных направлениях разработки инженерных и производственных интеллектуальных систем получены реальные результаты определенной обработки сенсорной информации.
- Эксперты – люди могут охватить картину в целом, все аспекты проблемы и понять, как они соотносятся с основной задачей. ЭС стремится сосредоточить на самой задаче, хотя смежные задачи могут повлиять на решение основной.
- Люди, эксперты и не эксперты, имеют то, что мы называем здравым смыслом, или общедоступными знаниями. Это широкий спектр общих знаний о мире, о том, какие законы в нем действуют, т.е. знания, которыми каждый из нас обладает, приобретает из опыта и которыми постоянно пользуется. Из-за огромного объема знаний, образующих здравый смысл, не существует легкого способа встроить их в интеллектуальную программу. Знания здравого смысла включают знания о том, что вы знаете и чего не знаете.'''
				bot.send_message(mid, answer)

			elif 'области' in mt:
				answer1 = '''
Области применения экспертных систем.

Необходимо отметить, что в настоящее время технология экспертных систем используется для решения различных типов задач (интерпретация, предсказание, диагностика, планирование, конструирование, контроль, отладка, инструктаж, управление ) в самых разнообразных проблемных областях, таких, как финансы, нефтяная и газовая промышленность, энергетика, транспорт, фармацевтическое производство, космос, металлургия, горное дело, химия, образование, целлюлозно-бумажная промышленность, телекоммуникации и связь и др.
а) Медицинская диагностика.
Диагностические системы используются для установления связи между нарушениями деятельности организма и их возможными причинами. Наиболее известна диагностическая система MYCIN, которая предназначена для диагностики и наблюдения за состоянием больного при менингите и бактериальных инфекциях. Ее первая версия была разработана в Стенфордском университете в середине 70-х годов. В настоящее время эта система ставит диагноз на уровне врача-специалиста. Она имеет расширенную базу знаний, благодаря чему может применяться и в других областях медицины.
б) Прогнозирование.
Прогнозирующие системы предсказывают возможные результаты или события на основе данных о текущем состоянии объекта. Программная система “Завоевание Уолл-стрита” может проанализировать конъюнктуру рынка и с помощью статистических методов алгоритмов разработать для вас план капиталовложений на перспективу. Она не относится к числу систем, основанных на знаниях, поскольку использует процедуры и алгоритмы традиционного программирования. Хотя пока еще отсутствуют ЭС, которые способны за счет своей информации о конъюнктуре рынка помочь вам увеличить капитал, прогнозирующие системы уже сегодня могут предсказывать погоду, урожайность и поток пассажиров. Даже на персональном компьютере, установив простую систему, основанную на знаниях, вы можете получить местный прогноз погоды.
в) Планирование.
Планирующие системы предназначены для достижения конкретных целей при решении задач с большим числом переменных. Дамасская фирма Informat впервые в торговой практике предоставляет в распоряжении покупателей 13 рабочих станций, установленных в холле своего офиса, на которых проводятся бесплатные 15-минутные консультации с целью помочь покупателям выбрать компьютер, в наибольшей степени отвечающий их потребностям и бюджету. Кроме того, компания Boeing применяет ЭС для проектирования космических станций, а также для выявления причин отказов самолетных двигателей и ремонта вертолетов. Экспертная система XCON, созданная фирмой DEC, служит для определения или изменения конфигурации компьютерных систем типа VAX и в соответствии с требованиями покупателя. Фирма DEC разрабатывает более мощную систему XSEL, включающую базу знаний системы XCON, с целью оказания помощи покупателям при выборе вычислительных систем с нужной конфигурацией. В отличие от XCON система XSEL является интерактивной.'''
				answer2 = '''
г) Интерпретация.
Интерпретирующие системы обладают способностью получать определенные заключения на основе результатов наблюдения. Система PROSPECTOR, одна из наиболее известных систем интерпретирующего типа, объединяет знания девяти экспертов. Используя сочетания девяти методов экспертизы, системе удалось обнаружить залежи руды стоимостью в миллион долларов, причем наличие этих залежей не предполагал ни один из девяти экспертов. Другая интерпретирующая система- HASP/SIAP. Она определяет местоположение и типы судов в тихом океане по данным акустических систем слежения.
д) Контроль и управление.
Системы, основанные на знаниях, могут применятся в качестве интеллектуальных систем контроля и принимать решения, анализируя данные, поступающие от нескольких источников. Такие системы уже работают на атомных электростанциях, управляют воздушным движением и осуществляют медицинский контроль. Они могут быть также полезны при регулировании финансовой деятельности предприятия и оказывать помощь при выработке решений в критических ситуациях.
е) Диагностика неисправностей в механических и электрических устройствах.
В этой сфере системы, основанные на знаниях, незаменимы как при ремонте механических и электрических машин (автомобилей, дизельных локомотивов и т.д.), так и при устранении неисправностей и ошибок в аппаратном и программном обеспечении компьютеров.
ж) Обучение.
Системы, основанные на знаниях, могут входить составной частью в компьютерные системы обучения. Система получает информацию о деятельности некоторого объекта (например, студента) и анализирует его поведение. База знаний изменяется в соответствии с поведением объекта. Примером этого обучения может служить компьютерная игра, сложность которой увеличивается по мере возрастания степени квалификации играющего. Одной из наиболее интересных обучающих ЭС является разработанная Д.Ленатом система EURISCO, которая использует простые эвристики. Эта система была опробована в игре Т.Тревевеллера, имитирующая боевые действия. Суть игры состоит в том, чтобы определить состав флотилии, способной нанести поражение в условиях неизменяемого множества правил. Система EURISCO включила в состав флотилии небольшие, способные провести быструю атаку корабли и одно очень маленькое скоростное судно и постоянно выигрывала в течение трех лет, несмотря на то, что в стремлении воспрепятствовать этому правила игры меняли каждый год.'''
				bot.send_message(mid, answer1)
				time.sleep(0.1)
				bot.send_message(mid, answer2)

			elif 'стратегические' in mt:
				answer = '''
Стратегические и динамические ЭС.

При классификации ЭС по проблемным областям на основе классов и типов задач, важно исследовать и оценивать характер проблемной и предметной областей с позиций динамики решаемых задач, важности временного фактора и темпоральной информации.
То есть, если исходная информация о предметной области или окружающем мире, на основе которой решается задача, не изменяется за время решения задачи, то такую предметную область можно условно назвать статической предметной областью, и ее представление в ЭС будет статическим. Если информация о предметной области изменяется за время решения задач, то такую предметную область можно назвать динамической предметной областью.
Если задачи, решаемые ЭС, явно но учитывают фактор времени и не изменяют в процессе решения данные о реальной действительности, то это статические задачи. Если задачи при решении требуют учета фактора времени или изменяют данные о реальных внешних процессах, то это динамические задачи.
То есть, ЭС работает в статической проблемной среде, если она использует статическое представление и решает статические задачи. Если ЭС использует динамическое представление или решает динамические задачи, то, соответственно она работает в динамической проблемной среде. Важность времени в динамических проблемных средах определила название таких ЭС, как систем, работающих в реальном времени.
Среди специализированных систем, основанных на знаниях, наиболее значимыми являются ЭС реального времени или динамические ЭС. Исследования по разработке таких систем с целью их практического использования ведутся достаточно давно, с середины 80-х годов прошлого века.
Значимость инструментальных средств реального времени определяется не столько их бурным коммерческим успехом (хотя и это достойно тщательного анализа), но, в первую очередь, тем, что только с помощью подобных средств создаются стратегически значимые приложения в таких областях, как управление непрерывными производственными процессами, аэрокосмические исследования, транспортировка и переработка нефти и газа, управление атомными и тепловыми электростанциями, финансовые операции и многие другие.
Экспертные системы реального времени, решают следующие классы задач: мониторинг в реальном масштабе времени, обнаружения неисправностей, диагностика, оперативное планирование, системы – советчики оператора.'''
				bot.send_message(mid, answer)

			elif 'проблемы' in mt:
				answer = '''
Проблемы представления и моделирования знаний.

Система искусственного интеллекта – это система, оперирующая знаниями о проблемной области. Без базы знаний систем искусственного интеллекта не существует. Для формализации и представления знаний разрабатываются специальные модели представления знаний и языки для описания знаний, выделяются различные типы знаний.
Модели представления знаний относятся к прагматическому направлению (основано на предположении о том, что мыслительная деятельность человека – «черный ящик») в исследованиях по искусственному интеллекту. При этом в системах, основанных на знаниях, информационные структуры представляются в форме декларативных (описательных) знаний, а алгоритмы и эвристики – в форме процедурных знаний.
Признано, что системы, основанные на знаниях, целесообразно разрабатывать с выделением ряда подсистем. Основными из них считаются:
•	подсистема представления декларативных знаний;
•	подсистема представления процедурных знаний;
•	подсистема манипулирования знаниями (механизм логического вывода).
Целью такого разделения является возможность использования системы в различных предметных областях. Для этого достаточно заменить подсистему представления декларативных знаний без изменения остальных частей. В самом деле, имея универсальный механизм логического вывода, достаточно заполнить оболочку системы конкретными правилами и фактами из требуемой предметной области, чтобы получить готовую к применению систему.
История развития методов инженерии знаний свидетельствует о том, что эта идея продолжительное время являлась основополагающим направлением исследований. Так, например, А. Ньюэлл и Г. Саймон из Университета Карнеги-Меллона (США) разработали программу GPS – универсальный решатель задач. В формальной логике был разработан метод резолюций. В 70-х гг. XX в., однако, большинство исследователей пришли к выводу, что не существует универсальной системы представления процедурных знаний, пригодной для всех областей деятельности. Подтверждением этому служит высокая ценность специалистов-экспертов в узких предметных областях. Была сформулирована проблема представления знаний.
Проблема представления знаний заключается в несоответствии между сведениями о зависимостях данной предметной области, имеющимися у специалиста, методами, используемыми им при решении задач, и возможностями формального (однозначно-ограниченного) представления такой информации в ЭВМ. Часто проблема осложняется трудностями для эксперта по формулированию в явном виде имеющихся у него знаний.
Общая проблема представления знаний включает ряд частных проблем:
•	представление декларативных знаний как данных, наделенных семантикой (фактов);
•	представление процедурных знаний как отношений между элементами модели, в том числе в виде процедур и функций;
•	представление метазнаний – правил обработки фактов, способов организации логического вывода, методов решения задач пользователем, порождения новых знаний и т. д.'''
				bot.send_message(mid, answer)

			elif 'продукционные' in mt:
				answer1 = '''
Продукционные модели.'''
				image1 = 'https://sun9-40.userapi.com/c855424/v855424049/1a81bf/2Y-2ZT040Rw.jpg'
				answer2 = '''
Продукционные модели можно считать наиболее распространенными моделями представления знаний. Продукционная модель – это модель, основанная на правилах, позволяющая представить знание в виде предложений типа:
«ЕСЛИ условие, ТО действие»
Продукционная модель обладает тем недостатком, что при накоплении достаточно большого числа (порядка нескольких сотен) продукций они начинают противоречить друг другу.
В общем случае продукционную модель можно представить в следующем виде:'''
				image2 = 'https://sun9-35.userapi.com/c855424/v855424049/1a81cb/EINmEZWV_cM.jpg'
				answer3 = '''
Системы обработки знаний, использующие продукционную модель получили название «продукционных систем». В состав экспертных систем продукционного типа входят база правил (знаний), рабочая память и интерпретатор правил (решатель), реализующий определенный механизм логического вывода. Любое продукционное правило, содержащееся в базе знаний, состоит из двух частей: антецендента и консеквента. Антецедент представляет собой посылку правила (условную часть) и состоит из элементарных предложений, соединенных логическими связками «и», «или». Консеквент (заключение) включает одно или несколько предложений, которые выражают либо некоторый факт, либо указание на определенное действие, подлежащее исполнению. Продукционные правила принято записывать в виде антецедент-консеквент.
Примеры продукционных правил:
ЕСЛИ
    «двигатель не заводится»
и
    «стартер двигателя не работает»
ТО
    «неполадки в системе электропитания стартера»
Любое правило состоит из одной или нескольких пар «атрибут-значение». В рабочей памяти систем, основанных на продукционных моделях, хранятся пары атрибут-значение, истинность которых установлена в процессе решения конкретной задачи к некоторому текущему моменту времени. Содержимое рабочей памяти изменяется в процессе решения задачи. Это происходит по мере срабатывания правил. Правило срабатывает, если при сопоставлении фактов, содержащихся в рабочей памяти, с антецедентом анализируемого правила имеет место совпадение, при этом заключение сработавшего правила заносится в рабочую память. Поэтому в процессе логического вывода объём фактов в рабочей памяти, как правило, увеличивается (уменьшаться он может в том случае, если действие какого-нибудь правила состоит в удалении фактов из рабочей памяти). В процессе логического вывода каждое правило из базы правил может сработать только один раз.
Существуют два типа продукционных систем – с «прямыми» и «обратными» выводами. Прямые выводы реализуют стратегию «от фактов к заключениям». При обратных выводах выдвигаются гипотезы вероятностных заключений, которые могут быть подтверждены или опровергнуты на основании фактов, поступающих в рабочую память. Существуют также системы с двунаправленными выводами.
Основные достоинства систем, основанных на продукционных моделях, связаны с простотой представления знаний и организации логического вывода. К недостаткам таких систем можно отнести следующее:
•	отличие от структур знаний, свойственных человеку;
•	неясность взаимных отношений правил;
•	сложность оценки целостного образа знаний;
•	низкая эффективность обработки знаний.
При разработке небольших систем (десятки правил) проявляются в основном положительные стороны продукционных моделей знаний, однако при увеличении объёма знаний более заметными становятся слабые стороны.'''
				bot.send_message(mid, answer1)
				time.sleep(0.1)
				bot.send_photo(mid, image1)
				time.sleep(0.1)
				bot.send_message(mid, answer2)
				time.sleep(0.1)
				bot.send_photo(mid, image2)
				time.sleep(0.1)
				bot.send_message(mid, answer3)

			elif 'логические' in mt:
				answer = '''
Логические модели представления знаний

Логическая модель представления знаний создается с использованием свойств логики предикатов. Предикат – это функция, принимающая только два значения: истина и ложь, и предназначенная для выражения свойств объектов или связей между ними;
В логических предикатах применяется термин высказывание. Высказывание – выражение, в котором утверждается или отрицается наличие каких-либо свойств у объекта.
Для именования предметной области используют константы.
Наиболее простым языком логики (в данном случае языком для исчисления высказываний) является язык, в котором отсутствуют переменные, а имеются только константы.
Пример таких высказываний. Пусть имеются две константы – А и B, в качестве связок между константами используются логические функции (и, или, не, или их комбинации).
Например, можно записать:
А – истинно И B – ложно;
А И B – ложно;
А ИЛИ B истинно.
Логика предикатов излагает высказывания в четких математических отношениях и легко программируется, т.е. легко связывается с четкими дискретными методами логики и языками программирования.
Помимо констант в исчислении предикатов используются и переменные. Такое исчисление предикатов записывается с помощью кванторов. К кванторам относятся, например, следующие ∀, ∃, ⇒ и другие.
На основе кванторов и констант можно составлять более сложные высказывания.
На языке теории множеств в самом общем случае логическая модель описывается четырьмя основными множествами:
М(Т, Р, А, П), где
множество Т– множество базовых элементов (или алфавит формальной системы);
множество Р– множество синтаксических правил, с помощью которых можно строить корректные предложения: правила алгебры логики (понятия логических предикатов множества, кванторов);
множество А– множество аксиом. Аксиома – это правильное утверждение, заданное априорно.
множество П– множество правил продукции, с помощью которых можно расширять множество А.
Для программирования с помощью логики применяется в большинстве случаев язык программирования ПРОЛОГ.
Преимущества логической модели представления знаний заключается в возможности непосредственно запрограммировать механизм вывода правильных высказываний.
Недостаток заключается в том, что, увлекаясь логическим, можно уйти от истины (с точки человеческого разума нет смысла), т.е. существует реальная возможность увлеченности математической стороной. Еще один недостаток состоит в том, что большинство интеллектуальных задач характеризуется недостаточной полнотой, неточностью и некорректностью. Это важно, например, в медицине и биологических науках, так как они слабо формализованные. Поэтому в данных областях науки чаще используют методы аналогий и ассоциаций.
'''
				bot.send_message(mid, answer)

			elif 'фреймы' in mt:
				answer1 = '''
Фреймы.

Фреймы разделяют окно браузера на отдельные области, расположенные рядом друг с другом. В каждую из таких областей загружается самостоятельная веб-страница. Поскольку вокруг фреймов существует много разговоров об их необходимости, далее приведем достоинства и недостатки фреймов, чтобы можно было самостоятельно решить стоит ли их использовать на своем сайте.
Достоинства фреймов
Простота
С помощью фреймов веб-страница разграничивается на две области, которые содержат навигацию по сайту и его контент. Механизм фреймов позволяет открывать документ в одном фрейме, по ссылке, нажатой в совершенно другом фрейме. Такое разделение веб-страницы на составляющие интуитивно понятно и логически обусловлено.
Быстрота
Для верстки без фреймов характерно размещение на одной странице и навигации и содержания. Это увеличивает объем каждой страницы и в сумме может существенно повлиять на объем загружаемой с сайта информации. А так как фреймы используют разделение информации на части, страницы с ними будут загружаться быстрее.
Размещение
Фреймы предоставляют уникальную возможность — размещение информации точно в нужном месте окна браузера. Так, можно поместить фрейм внизу браузера и независимо от прокручивания содержимого, эта область не изменит своего положения.
Изменение размеров областей
Можно изменять размеры фреймов «на лету», чего не позволяет сделать традиционная верстка HTML.
Загрузка
Загрузка веб-страницы происходит только в указанное окно, остальные остаются неизменными. С помощью языка JavaScript можно осуществить одновременную загрузку двух и более страниц во фреймы.'''
				answer2 = '''
Недостатки фреймов
Навигация
Пользователь зачастую оказывается на сайте, совершенно не представляя, куда он попал, потому что всего лишь нажал на ссылку, полученную в поисковой системе. Чтобы посетителю сайта было проще разобраться, где он находится, на каждую страницу помещают название сайта, заголовок страницы и навигацию. Фреймы, как правило, нарушают данный принцип, отделяя заголовок сайта от содержания, а навигацию от контента. Представьте, что вы нашли подходящую ссылку в поисковой системе, нажимаете на нее, а в итоге открывается документ без названия и навигации. Чтобы понять, где мы находимся или посмотреть другие материалы, придется редактировать путь в адресной строке, что в любом случае доставляет неудобство.
Плохая индексация поисковыми системами
Поисковые системы плохо работают с фреймовой структурой, поскольку на страницах, которые содержат контент, нет ссылок на другие документы.
Внутренние страницы нельзя добавить в «Закладки»
Фреймы скрывают адрес страницы, на которой находится посетитель, и всегда показывают только адрес сайта. По этой причине понравившуюся страницу сложно поместить в закладки браузера.
Несовместимость с разными браузерами
Параметры фреймов обладают свойством совершенно по разному отображаться в различных браузерах. Причём противоречие между ними настолько явное, что одни и те же параметры интерпретируются браузерами совершенно по-своему.
Непрестижность
Весьма странный недостаток, который не имеет никакого отношения к техническим особенностям создания сайта, а носит скорее идеологический характер. Сайты с фреймами считаются несолидными, а их авторы сразу выпадают из разряда профессионалов, которые никогда не используют фреймы в своих работах. Исключение составляют чаты, где без фреймов обойтись хотя можно, но достаточно хитрыми методами, а с помощью фреймов создавать чаты достаточно просто.
Надо отметить, что некоторые приведённые недостатки вполне обходятся. Так, с помощью скриптов можно сделать, что открытый в браузере отдельный документ формируется со всей фреймовой структурой. Поисковые системы также уже лучше индексируют фреймовые документы, чем это было несколько лет назад.'''
				bot.send_message(mid, answer1)
				time.sleep(0.1)
				bot.send_message(mid, answer2)

			elif 'семантические' in mt:
				answer = '''
Семантические сети.

Семантиическая сеть — информационная модель предметной области, имеющая вид ориентированного графа, вершины которого соответствуют объектам предметной области, а дуги (рёбра) задают отношения между ними. Объектами могут быть понятия, события, свойства, процессы[1]. Таким образом, семантическая сеть является одним из способов представления знаний. В названии соединены термины из двух наук: семантика в языкознании изучает смысл единиц языка, а сеть в математике представляет собой разновидность графа — набора вершин, соединённых дугами (рёбрами), которым присвоено некоторое число. В семантической сети роль вершин выполняют понятия базы знаний, а дуги (причем направленные) задают отношения между ними. Таким образом, семантическая сеть отражает семантику предметной области в виде понятий и отношений.
Компьютерные семантические сети были детально разработаны Ричардом Риченсом в 1956 году в рамках проекта Кембриджского центра изучения языка по машинному переводу. Процесс машинного перевода подразделяется на 2 части: перевод исходного текста в промежуточную форму представления, а затем эта промежуточная форма транслируется на нужный язык. Такой промежуточной формой как раз и были семантические сети. В 1961 г. появилась работа Мастерман, в которой она, в частности, определяла базовый словарь для 15000 понятий. Эти исследования были продолжены Робертом Симмонсом (1966), Й. Уилксом (1972) и другими учёными.
'''
				bot.send_message(mid, answer)

			elif 'представление' in mt:
				answer = '''
Представление и формализация нечетких знаний.

Понятия, которыми оперирует человек в различных областях знаний, являются по своей природе слишком сложными и многоплановыми для того, чтобы использовать для их представления только традиционные, точные, хорошо определенные модели и алгоритмы. Многие понятия вследствие субъективности человеческого мышления, приблизительного характера умозаключений и лингвистического их описания оказываются нечеткими по своей природе и требуют для своего представления соответствующего аппарата. Создание такого аппарата связано с именем Л. Заде, предложившим в 1965 г. теорию нечетких множеств, ставшую мощным инструментом для решения широкого круга проблем, в которых важное место занимают субъективные, трудно формализуемые знания человека.. Особый интерес теория нечетких множеств вызывает в связи с исследованиями и разработками человеко-ориентированных социальных и управленческих систем, в частности, экспертных систем.'''
				bot.send_message(mid, answer)

			elif 'операции' in mt:
				answer = '''
Операции с нечеткими множествами.

Включение. Пусть A и B – нечеткие множества на универсальном множестве X . Говорят, что A содержится в B , или B включает A , т.е. A ⊂ B , если ∀ x ∈ X μ A x ≤ μ B x . Иногда используют термин «доминирование», т.е. B доминирует A при A ⊂ B .
Равенство. Пусть A и B – нечеткие множества на универсальном множестве X . Говорят, что A и B равны, т.е. A = B , если ∀ x ∈ X μ A x = μ B x . В противном случае A ≠ B .
Дополнение. Пусть A и B – нечеткие множества с множеством принадлежностей характеристических функций M = 0 ; 1 , заданные на универсальном множестве X . Говорят, что A и B дополняют друг друга, т.е. A = B _ или B = A _ , если ∀ x ∈ X μ A x = 1 − μ B x . Очевидно следствие A _ = A – так называемое свойство инволюции.
Пересечение нечетких множеств A и B , заданных на универсальном множестве X , – это наибольшее нечеткое множество A ∩ B , содержащееся одновременно и в A , и в B с функцией принадлежности, заданной следующим образом:
∀ x ∈ X μ A ∩ B x = min μ A x ; μ B x .
Объединение нечетких множеств A и B , заданных на универсальном множестве X , – это наименьшее нечеткое множество A ∪ B , включающее как A , так и B с функцией принадлежности, заданной следующим образом:
∀ x ∈ X μ A ∪ B x = max μ A x ; μ B x .
Разность нечетких множеств A и B , заданных на универсальном множестве X , – это нечеткое множество A ∖ B = A ∩ B _ с функцией принадлежности, заданной следующим образом:
∀ x ∈ X μ A ∖ B x = μ A ∩ B _ x = min μ A x ; 1 − μ B x .
Симметрическая разность нечетких множеств A и B , заданных на универсальном множестве X , – это нечеткое множество A − B с функцией принадлежности, заданной следующим образом:
∀ x ∈ X μ A-B x = μ A x − μ B x.'''
				bot.send_message(mid, answer)

			elif 'нечеткие' in mt:
				answer = '''
Нечеткие отношения.

На данный вопрос пока нет ответа'''
				bot.send_message(mid, answer)

			elif 'нечёткие' in mt:
				answer = '''
Нечеткие отношения.

На данный вопрос пока нет ответа'''
				bot.send_message(mid, answer)

			elif 'нейронные' in mt:
				keyboard = types.InlineKeyboardMarkup()
				callback_button1 = types.InlineKeyboardButton(text="Нейронные сети.", callback_data="aibyn18")
				callback_button2 = types.InlineKeyboardButton(text="Нейронные сети и экспертные системы.", callback_data="aiym27")
				callback_button3 = types.InlineKeyboardButton(text="Нейронные сети и нечеткая логика", callback_data="aiym28")
				keyboard.add(callback_button1)
				keyboard.add(callback_button2)
				keyboard.add(callback_button3)
				bot.send_message(mid, "Выбери", reply_markup=keyboard)

			elif 'методы' in mt:
				keyboard = types.InlineKeyboardMarkup()
				callback_button1 = types.InlineKeyboardButton(text="Методы вывода на основе прямой и обратной цепочек.", callback_data="aibyn19")
				callback_button2 = types.InlineKeyboardButton(text="Методы поиска решений в больших пространствах состояний.", callback_data="aibyn21")
				keyboard.add(callback_button1)
				keyboard.add(callback_button2)
				bot.send_message(mid, "Выбери", reply_markup=keyboard)

			elif 'общие' in mt:
				answer = '''
Общие методы поиска решений в пространстве состояний.

На данный вопрос пока нет ответа'''
				bot.send_message(mid, answer)

			elif 'дедуктивные' in mt:
				answer = '''
Дедуктивные методы поиска решений.

Логические модели являются формой представления знаний о проблемных областях с небольшим пространством поиска решений и определенными фактами и знаниями. Они удобны также для формального описания мышления человека, так как часто его рассуждения при решении задач носят дедуктивный характер. Для построения подобных рассуждений система ИИ должна быть способна выводить новые факты исходя из известных ей. Новые логические конструкции и формы создаются применением правил вывода к имеющимся логическим формулам. Основам и методам математической логики посвящены известные монографии [29, 34, 66].
Распространенным типом логических моделей является логика предикатов первого порядка.
Логика предикатов первого порядка является расширением логики высказываний, так как основным объектом здесь является переменное высказывание (предикат), истинность и ложность которого зависят от значений его переменных. Рассмотрим коротко основные правила вывода логики предикатов.
Несколько дополнительных определений:
- Если формула истинна при всех возможных итерациях, то говорят, что она является общезначимой формулой (тавтологией).
- Если формула ложна при всех своих итерациях, то говорят, что она является противоречивой (противоречием). Противоречивая формула невыполнима.
Всякая формула может быть преобразована в нормальную формулу путем использования законов эквивалентных преобразований. Приведем некоторые из них:
P ↔ Q = (P → Q) ∧ (Q → P)
P → Q = ¬P ∨ Q
¬(¬P) = P - закон двойного отрицания
¬(P ∨ Q) = ¬P ∧ ¬Q; ¬(P ∧ Q) = ¬P ∨ ¬Q - законы де Моргана.'''
				bot.send_message(mid, answer)

			elif 'поиск' in mt:
				answer = '''
Поиск решений в условиях неопределенности.

Неопределенность — свойство объекта принятия решения, выра жающееся в его неотчетливости, неясности, необоснованности, при водящее к недостаточной возможности для лиц, принимающих ре шение, осознания, понимания, определения его настоящего и буду щего состояния.
Риск — возможная опасность, действие наудачу, требующее, с одной стороны, смелости в надежде на счастливый исход, с другой — учета математического обоснования степени риска.
В условиях определенности лица, принимающие решения, доста точно точно определяют возможные альтернативы решения. Однако на практике трудно оценить факторы, создающие условия для при нятия решения, поэтому ситуации полной определенности чаще все го отсутствуют.
Источниками неопределенности ожидаемых условий в развитии предприятия могут служить поведение конкурентов, персонала ор ганизации, технические и технологические процессы и изменения конъюнктурного характера. При этом условия могут подразделяться на социально политические, административно законодательные,производственные, коммерческие, финансовые [141]. Таким обра зом, условиями, создающими неопределенность, являются воздей ствия факторов внешней и внутренней среды организации. Если есть несколько вариантов будущего развития окружающей среды, обусловливающих соответствующие экономические результаты, то может возникнуть ситуация риска или неопределенности. В этом случае можно, используя теорию вероятности, рассчитать вероят ность того или иного изменения среды; в ситуации неопределеннос ти значения вероятности получить нельзя. Неопределенность про является в невозможности определения вероятности наступления различных состояний внешней среды из за их неограниченного ко личества и отсутствия способов оценки. Неопределенность учитыва ется различными способами. Она уменьшается, если свести ее к условиям риска.
Снижение неопределенности, необходимой для принятия решения, на практике обеспечивается:
•сбором информации, уменьшающей неопределенность ожида ий;
•обработкой информации методами анализа, прогноза, сценария и определения причин, форм и последствий неопределенности;
•разработкой моделей, адекватных складывающимся ситуациям, и получением в результате моделирования значений целевых вели чин, функциональных зависимостей состояний объекта управле ния и окружающей его среды.'''
				bot.send_message(mid, answer)

			elif 'обработка' in mt:
				answer = '''
Обработка информации в нейронных сетях.

Нейронные сети можно рассматривать как системы, преобразующие информацию подобно процессам, происходящим в человеческом мозге. Но, несмотря на вышесказанное, нельзя считать, что их развитие в ближайшем времени достигнет результатов, при которых можно будет утверждать, что нейронные сети полностью повторяют функции человеческого мозга. Однако нельзя не отметить тот уровень, который достигнут на сегодняшний день. Конечно, применение нейронных сетей обоснованно не во всех случаях, но что касается вопросов распознавания образов и восстановления недостающей информации в данных, им, пожалуй, будет отводиться большее предпочтение, чем обычным вычислительным устройствам, реализующим программные алгоритмы.
Спектральный анализ исследуемого сигнала, основанный на преобразовании Фурье, требуют большого числа операций умножения с накоплением. К примеру, для расчета всего преобразования Фурье сигнала, содержащего N выборок, требуется N2 пар таких операций. Как видно, при большом количестве выборок, величина выполняемых операций умножения может достигать значения, при котором время, затраченное для выполнения анализа, может оказаться неприемлемо большим.
Большое количество времени, затрачиваемого на выполнение преобразования Фурье, привело к появлению в 60-х гг. прошлого столетия алгоритма, позволившего ускорить процесс вычисления. Данный алгоритм получил название быстрого преобразования Фурье.
Суть метода заключается в уменьшении количества операций умножения, необходимых для вычисления преобразования, например, путем деления количества точек выборки пополам. В этом случае наибольшая скорость процесса вычисления может быть получена при N=2n. Число требуемых операций умножения с накоплением можно будет оценить как Nlog2(N) раз [3].
И, тем не менее, как было отмечено ранее, преобразования Фурье требуют большого количества операций умножения с накоплением, не говоря уже о реализации искусственной нейронной сети в цифровых устройствах, где может потребоваться выполнения большого количества операций умножения. Как следствие, реализация данных методов программными средствами может привести к длительному процессу обработки входного сигнала, что неприемлемо в системах, работающих в масштабе реального времени. Поэтому, следует уделить внимание реализации этих методов анализа на базе FPGA-микросхем.'''
				bot.send_message(mid, answer)

			elif 'извлечение' in mt:
				answer = '''
Извлечение знаний с помощью нейронных сетей'''
				image1 = 'https://sun9-33.userapi.com/c855424/v855424848/1ac6be/-BDqpmqQKCA.jpg'
				image2 = 'https://sun9-36.userapi.com/c855424/v855424848/1ac6d1/WXfTRVyaPoY.jpg'
				bot.send_message(mid, answer)
				time.sleep(0.1)
				bot.send_photo(mid, image1)
				time.sleep(0.1)
				bot.send_photo(mid, image2)
			
			elif 'обучение' in mt:
				answer1 = '''
Обучение нейронной сети
'''
				image1 = 'https://sun9-69.userapi.com/c855424/v855424848/1ac6fa/lJfrN-lReN8.jpg'
				image2 = 'https://sun9-51.userapi.com/c855424/v855424848/1ac70e/ykVOjqOKeqg.jpg'
				answer2 = ''''Использование регуляризирующего члена E1 приводит к дифференциации весов по величинам, уменьшая большинство, но сохраняя значения некоторых из них. Обучение сети производится методом обратного распространения ошибки.'''
				bot.send_message(mid, answer1)
				time.sleep(0.1)
				bot.send_photo(mid, image1)
				time.sleep(0.1)
				bot.send_photo(mid, image2)
				time.sleep(0.1)
				bot.send_message(mid, answer2)

			elif 'элементы' in mt:
				answer = '''
Элементы нечеткой логики 

На данный вопрос пока нет ответа'''
				bot.send_message(mid, answer)

			elif 'этапы' in mt:
				answer = '''
Этапы проектирования интеллектуальных систем.

На данный вопрос пока нет ответа'''
				bot.send_message(mid, answer)

			elif 'структура' in mt:
				answer = '''
Структура интеллектуальной системы.

На данный вопрос пока нет ответа'''
				bot.send_message(mid, answer)

			elif 'проектирование' in mt:
				answer = '''
Проектирование базы знаний.

На данный вопрос пока нет ответа'''
				bot.send_message(mid, answer)

			elif 'технология' in mt:
				answer1 = '''
Технология работы интеллектуальных информационных систем (ИИС)

В первых экспертных системах отыскание, подготовка, извлечение и ввод знаний, специфических для предметной области, осуществлялись инженером по знаниям. Производилось интервьюирование соответствующих экспертов по специальной методике. Однако этот процесс был чрезвычайно трудоемким, кроме того, не все эксперты охотно делились своими знаниями. В связи с этим получили распространение методы интеллектуального анализа данных (knowledge discovery and data mining). Эти методы подробно рассматриваются в следующей главе В данном разделе приведены примеры автоматического формирования знаний.
По мере того как корпорации накапливают огромные массивы данных об их ежедневных операциях, использование этих данных становится наиболее важным направлением их деятельности. Чтобы удовлетворить клиентов и одержать победу в бизнесе на повседневно изменяющемся рынке, необходимо понимать данные и извлекать из них ценную информацию для последующего использования на всех стадиях деятельности корпорации — от генерации идей до планирования производства и проектирования целевого маркетинга и рекламного дела. Однако извлечение информации из данных усложняется по мере роста числа переменных и увеличения числа связей между переменными. Например, для каждого из 90 000 000 клиентов American Telephone and Telegraph Company (AT&T) существуют несвязанные записи в сотнях баз данных компании AT&T. Наверху этой пирамиды каждую секунду генерируется новая информация по мере того, как потоки информации закачиваются в сеть AT&T пользователями. Это означает, что свыше 200 000 000 новых элементов данных генерируется ежедневно в операциях AT&T. При таком экстраординарно огромном количестве данных и их сложных взаимосвязях проблема понимания поведения клиентов на уровне соответствующего сегмента рынка является чрезвычайно сложной, не говоря уже об уровне отдельного клиента. Техника открытия знаний в базах данных привлекает значительное внимание с позиций статистики, информационной технологии, обучения машин, систем баз знаний, СУБД.
Открытие знаний в базах данных (ОЗБД) — это процесс открытия первоначально неизвестных зависимостей в больших базах данных. ОЗБД включает в себя следующие элементы:
•	отбор, очистку, преобразование и проекцию данных;
•	анализ данных для извлечения зависимостей;
•	оценка зависимостей для отбора из них наиболее значимых, т.е. «знаний»;
•	консолидация знания;
•	разрешение конфликтов с ранее извлеченными знаниями;
•	обеспечение доступности знаний для системы ОЗБД.
Несмотря на то, что системы ОЗБД разработаны в области финансов, страхования, маркетинга, только немногие из них увязывают добытые знания непосредственно с процессами принятия решений. В данном разделе сделана попытка увязать процесс открытия знаний (используя модель обучения байесовской сети) и процесс принятия решений. Использована диаграмма влияния в качестве машины решений или системы обработки проблем, чтобы рекомендовать оптимальный вариант решения.'''
				answer2 = '''
Рассмотрим в качестве примера эффективного применения этой технологии AT&T. Служба работы с клиентами AT&T осуществляет несколько миллионов контактов с пользователями ежедневно. В процессе таких контактов:
•	заполняются вопросники, анкеты;
•	осуществляется подписка на новые услуги;
•	фиксируются комментарии;
•	предлагаются специальные услуги, которых не было у клиента, но в которых он может быть заинтересован.
Телефонный дисконтный план (ТДП) — одна из таких услуг. Дополнительные услуги: радиотелефон, локальное обслуживание, услуги развлечений, ИНТЕРНЕТ-услуги. ТДП — это план, в котором оплата за телекоммуникации дисконтирована на определенную долю в зависимости от вида телефонных обращений и интенсивности использования. Рекламная компания по продвижению новой услуги стоит довольно дорого, так как требует много времени на объяснение преимуществ ТДП.
Интеллектуальная система поддержки решений, рекомендующая наилучший способ действий, полезна именно в такой ситуации. Цель этой системы — максимизировать эффективность телемаркетинга путем минимизации времени, затрачиваемого на безуспешную рекламную компанию. Теоретически это можно было бы сделать при помощи предсказания и проведения рекламной компании только с теми клиентам, которые подпишутся на него. Для предсказания вероятности отказа от подписки на ТДП разработана модель обучения байесовской сети на предварительно проклассифицированных множествах данных. Обучающий набор данных содержит реакцию клиентов на предварительно отобранные данные ТДП.
Интеллектуальная система поддержки решений должна предсказывать реакцию пользователя на предложение ТДП.
Подход состоит в том, чтобы предсказать (прогнозировать) реакцию пользователя на предложение ТП, основываясь на знаниях, полученных из предварительных реакций пользователя при контакте с базой данных. Чтобы получить хорошие предсказания реакции пользователя, используется система обучения машин, называемая ARPI (Advanced Pattern Recognition and Identification), извлекающая знание из базы данных и представляющая в байесовской сети.'''
				bot.send_message(mid, answer1)
				time.sleep(0.1)
				bot.send_message(mid, answer2)

			elif 'байесовская' in mt:
				answer1 = '''
Байесовская сеть

Байесовская сеть - это направленный ациклический граф, в котором каждая вершина - случайная переменная.
Байесовская сеть (или байесова сеть) — графовая вероятностная модель, представляющая собой множество переменных и их вероятностных зависимостей по Байесу. Например, байесовская сеть может быть использована для вычисления вероятности того, чем болен пациент, по наличию или отсутствию ряда симптомов, основываясь на данных о зависимости между симптомами и болезнями. Математический аппарат байесовых сетей создан американским учёным Джудой Перлом, лауреатом Премии Тьюринга (2011).
Формально, байесовская сеть — это направленный ациклический граф, каждой вершине которого соответствует случайная переменная, а дуги графа кодируют отношения условной независимости между этими переменными. Вершины могут представлять переменные любых типов, быть взвешенными параметрами, скрытыми переменными или гипотезами. Существуют эффективные методы, которые используются для вычислений и обучения байесовских сетей. Если переменные байесовской сети являются дискретными случайными величинами, то такая сеть называется дискретной байесовской сетью. Байесовские сети, которые моделируют последовательности переменных, называют динамическими байесовскими сетями. Байесовские сети, в которых могут присутствовать как дискретные переменные, так и непрерывные, называются гибридными байесовскими сетями. Байесовская сеть, в которой дуги помимо отношений условной независимости кодируют также отношения причинности, называют причинно-следственными байесовыми сетями.
Байесовская сеть позволяет получить ответы на следующие типы вероятностных запросов:
-	нахождение вероятности свидетельства,
-	определение априорных маргинальных вероятностей,
-	определение апостериорных маргинальных вероятностей, включая:
-	прогнозирование, или прямой вывод, — определение вероятности события при наблюдаемых причинах,
-	диагностирование, или обратный вывод (абдукция), — определение вероятности причины при наблюдаемых следствиях,
-	межпричинный (смешанный) вывод (англ. intercausal inference) или трансдукция, — определение вероятности одной из причин наступившего события при условии наступления одной или нескольких других причин этого события.
-	вычисление наиболее вероятного объяснения наблюдаемого события (англ. most probable explanation, MPE),
-	вычисление апостериорного максимума (англ. maximum a-posteriori, MAP).
В силу того, что байесовская сеть — это полная модель для переменных и их отношений, она может быть использована для того, чтобы давать ответы на вероятностные вопросы. Например, сеть можно использовать, чтобы получить новое знание о состоянии подмножества переменных, наблюдая за другими переменными (переменные-свидетельства). Это процесс вычисления апостериорного распределения переменных по переменным-свидетельствам называют вероятностным выводом. Это следствие даёт нам универсальную оценку для приложений, где нужно выбрать значения подмножества переменных, которое минимизирует функцию потерь, например, вероятность ошибочного решения. Байесовская сеть может также считаться механизмом для автоматического построения расширения теоремы Байеса для более сложных задач.'''
				answer2 = '''
Для проведения вероятностного вывода в байесовских сетях используются следующие алгоритмы:
•	Точные:
-	вывод методом грубой силы путём маргинализации полного совместного распределения;
-	алгоритмы устранения переменных и символьные вычисления,
-	кластеризация,
-	алгоритмы пропагации (передача) сообщений между узлами сети,
•	Приближённые на основе метода Монте-Карло:
-	алгоритмы формирования выборок с исключением,
-	метод оценки выборок с учётом правдоподобия,
-	алгоритм МСМС (англ. Markov chain Monte Carlo) и др.'''
				bot.send_message(mid, answer1)
				time.sleep(0.1)
				bot.send_message(mid, answer2)

			elif 'термины' in mt:
				answer = '''
Термины и понятия технологии Data Mining.

Data Mining (discovery-driven data mining) — это процесс обнаружения в исходных данных ранее неизвестных, нетривиальных, практически полезных и доступных интерпретации знаний (закономерностей), необходимых для принятия решений в различных сферах человеческой деятельности.
Термин «Data Mining» переводится как «извлечение информации» или «добыча данных». Цель Data Mining состоит в выявлении скрытых правил и закономерностей в наборах данных. Результатом такого метода обработки данных являются эмпирические модели, классификационные правила, выделенные кластеры и т.д.
Data Mining - мультидисциплинарная область, возникшая и развивающаяся на базе таких наук как прикладная статистика, распознавание образов, искусственный интеллект, теория баз данных и др.'''
				image = 'https://sun9-2.userapi.com/c855424/v855424509/1b171b/xSTHZUwKmeg.jpg'
				bot.send_message(mid, answer)
				time.sleep(0.1)
				bot.send_photo(mid, image)

			elif 'понятие' in mt:
				answer = '''
Понятие онтологии. Типы онтологии.

Онтология – это иерархически структурированное множество классов, описывающих предметную область, которое может быть использовано как основа для базы знаний.
Онтология – это представление концептуальной схемы логической теории, словарь или спецификация для описания системы.
Классификация онтологий
По глубине проработки все онтологии делятся на:
-	«весомые» онтологии (Heavy-weighted), содержащие аксиомы {C, R, A}
-	«легкие» (Light-weighted), их не содержащие {C, R}
По уровню обобщения можно выделить следующие 4 категории онтологий:
-	Онтологии представления описывают концептуальную модель, которая является основой формализма представления знаний.
-	Общие онтологии подобны онтологиям предметных областей, но описываемые ими понятия являются общими для нескольких предметных областей. Обычно такие онтологии описывают такие понятия, как состояние, событие, процесс, действие, компонент.
-	Онтология предметной области выражает концептуализацию, соответствующую определенной предметной области.
-	Прикладная онтология (Онтология приложения) содержит все описания, необходимые для моделирования знаний, требуемых для конкретного приложения. Обычно прикладная онтология — это комбинация понятий, взятых из онтологии предметной области и общей онтологии, которая может содержать расширения, специфические для используемых методов и решаемых задач.'''
				bot.send_message(mid, answer)

			elif 'эволюционные' in mt:
				answer1 = '''
Эволюционные методы поиска с использованием генетического алгоритма.

Генетический алгоритм (ГА) [2,8,9] – это компьютерная модель эволюции популяции искусственных "особей". Каждый особь характеризуется своей хромосомой Sk, хромосома есть "геном" особи. Хромосома определяет приспособленность особи f(Sk); k = 1,..., n; n – численность популяции. Хромосома есть цепочка символов Sk = (Sk1, Sk2,...,SkN), N – длина цепочки. Символы интерпретируются как "гены" особи, расположенные в хромосоме Sk . Задача алгоритма состоит в максимизации функции приспособленности f(Sk) .
Эволюция состоит из последовательности поколений. Для каждого поколения отбираются особи с большими значениями приспособленностями. Хромосомы отобранных особей рекомбинируются и подвергаются малым мутациям. Формально, схема ГА может быть представлена следующим образом (популяция t-го поколения обозначается как {Sk(t)}):
Шаг 0 . Создать случайную начальную популяцию {Sk(0)}.
Шаг 1. Вычислить приспособленность f(Sk) каждой особи Sk популяции {Sk(t)}.
Шаг 2. Производя отбор особей Sk в соответствии с их приспособленностями f(Sk) и применяя генетические операторы (рекомбинации и точечные мутации) к отобранным особям, сформировать популяцию следующего поколения {Sk(t+1)}.
Шаг 3. Повторить шаги 1,2 для t = 0, 1, 2, ... , до тех пор, пока не выполнится некоторое условие окончания эволюционного поиска (прекращается рост максимальной приспособленности в популяции, число поколений t достигает заданного предела и т.п.).
Имеется ряд конкретных вариантов генетического алгоритма, которые отличаются по схемам отбора, рекомбинаций, по форме представления хромосом и т.д.
Наиболее традиционный вариант генетического алгоритма базируется на следующей конкретной схеме: 1) цепочки символов в хромосомах бинарны (символы Ski принимают значения 0 либо 1), длина цепочек постоянна (N = const), 2) метод отбора пропорционально-вероятностный (см. ниже), 3) рекомбинации производятся по схеме однократного кроссинговера.
Пропорционально-вероятностный отбор означает, что на шаге 2 отбор производится с вероятностями, пропорциональными приспособленностям fk особей ( fk = f(Sk) ) . Эту схему отбора мы уже обсуждали в лекции 2 при описании модели квазивидов. Схему можно представить, как выбор особи с помощью рулетки, относительные площади секторов которой равны qk = fk [ l fl ]-1 ( см. Рис.1 и "прилегающий к нему" текст в  Лекции 2 ).
Возможны и другие методы отбора. Например, отбор может быть ранжированным: все особи ранжируются по приспособленностям и заданная часть (скажем, лучшая половина) лучших особей отбирается для формирования следующего поколения.
Одноточечный кроссинговер организуется по аналогии с биологической рекомбинацией. А именно, если есть два родителя S1 = (S11, S12,...,S1N) и S2 = (S21, S22,..., S2N), то их потомки есть (S11,..., S1m, S2,m+1,...,S2N) и (S21,..., S2m, S1,m+1,...,S1N); т.е. "голова" и "хвост" хромосомы потомка берутся от разных родителей. Точка кроссинговера выбирается случайным образом, в приведенном примере она располагается между m-м  и  m+1-м  "генами". Аналогичным образом может быть организован двухточечный и "несколько-точечный" кроссинговер. Тип рекомбинации по схеме кроссинговера часто дополняется инверсиями, т.е. изменением порядка следования символов в участках хромосом; это аргументируется, как необходимость подобрать существенные для приспособленности комбинации символов в хромосоме.'''
				answer2 = '''
Некоторые схемы ГА используют равномерные рекомбинации. Это означает, что два родителя имеют двух потомков, символы хромосомы одного из потомков выбираются случайно от любого (но сохранением порядка следования символов), а второму потомку достаются оставшиеся символы. Например, два потомка родителей S1 = (S11, S12,..., S1N) и S2 = (S21, S22,..., S2N), могут иметь следующие хромосомы (S11, S22, S13, S14,..., S2N) и (S21, S12, S23, S24,..., S1N).
Как метод оптимизации, ГА обладает внутренним параллелизмом (implicit parallelism): разные частные существенные комбинации генов – их часто называют "схематами" (“schemata”) – отыскиваются параллельным образом, одновременно для всех комбинаций. Отметим, что чем меньше комбинация, тем легче она может быть найдена.
Подчеркнем, что генетические алгоритмы по общей схеме подобны модели квазивидов (  Лекция 2 , Лекция 3 ). Основное различие состоит в том, что в модели квазивидов не включаются рекомбинации, в то время как именно рекомбинации играют важную роль в процессе поиска новых хороших решений в генетических алгоритмах (интенсивность мутаций в ГА обычно очень мала). Правда, в последнее время исследователи ГА стали высказывать определенный скептицизм по поводу необходимости включения рекомбинаций в схему генетического алгоритма.
Оценка эффективности генетического алгоритма
Рассмотрим простейший случай традиционного варианта генетического алгоритма, предполагая, что 1) цепочки символов в хромосомах бинарны ( Ski = 0 либо 1), 2) длина цепочек равна N = const, 3) отбор пропорционально-вероятностный, 4) рекомбинации отсутствуют, есть только точечные мутации (случайные равновероятностные замены символов), 5) численность популяции постоянна: n = const.
Тогда алгоритм совпадает полностью со схемой модели квазивидов ( Лекция 2 , Лекция 3). И справедливы оценки скорости эволюции и эффективности эволюционного поиска, полученные в лекции 4 . Воспроизведем здесь основные идеи и результаты этих оценок.
Для определенности будем считать, что приспособленности особей определяются Хемминговой мерой близости, т.е. имеется одна оптимальная особь Sm, а приспособленности других особей экспоненциально уменьшаются с ростом расстояния по Хеммингу между рассматриваемой S и оптимальной хромосомой Sm .'''
				answer3 = '''
Предполагая, что интенсивность отбора достаточно велика, считаем, что основное время эволюции лимитируется мутациями. Причем, если мутации велики, то возможны потери уже найденных особей, а если мутации малы, то это замедляет эволюционный процесс. Разумно выбрать такую интенсивность мутаций, чтобы за одно поколение в среднем менялся один символ в хромосоме. Т.е. вероятность замены каждого символа Pm в процессе мутаций должна быть порядка: Pm ~ N –1 .
Тогда, если пренебречь нейтральным отбором, то число поколений, требуемых для нахождения оптимума, составляет (качественная картина эволюционного процесса иллюстрируется рис.1  в лекции 4 )
T ~ (Pm) –1 ~ N . (1)
Условие пренебрежения нейтральным отбором есть
T < Tn ~ n , (2)
где n  –   численность популяции.
Это условие предполагаем выполненным на пределе, т.е. полагаем: T ~ n . Общее число особей, участвующих в эволюции, составляет nобщ = nT . Комбинируя формулы (1), (2), имеем:
nобщ ~ N 2 . (3)
Хотя оценки (1), (3) довольно грубые, они важны с инженерной точки зрения – используя эти оценки, разработчик конкретного алгоритма может оценить ту вычислительную мощность, которая ему потребуется.
С инженерной точки зрения также важно то, что возможна аппаратная реализация многопроцессорных специализированных вычислительных микроэлектронных устройств, эффективно реализующих генетический алгоритм. А именно, каждой "особи" популяции можно поставить в соответствие отдельный процессор. Тогда расчеты приспособленностей можно выполнять параллельным образом, что позволяет ускорить процесс оптимизации. В работе [10] была предложена микроэлектронная схема эволюционного оптимизатора, основанного на использовании векторного логического устройства и оперативной памяти большой емкости. Основные информационные процессы в эволюционном оптимизаторе осуществляются параллельным образом.'''
				bot.send_message(mid, answer1)
				time.sleep(0.1)
				bot.send_message(mid, answer2)
				time.sleep(0.1)
				bot.send_message(mid, answer3)

			elif 'искусственный' in mt:
				answer = '''
Искусственный нейрон, его схема и основные характеристики.

Иску́сственный нейро́н (математический нейрон Маккаллока — Питтса, формальный нейрон[1]) — узел искусственной нейронной сети, являющийся упрощённой моделью естественного нейрона. Математически, искусственный нейрон обычно представляют как некоторую нелинейную функцию от единственного аргумента — линейной комбинации всех входных сигналов. Данную функцию называют функцией активации[2] или функцией срабатывания, передаточной функцией. Полученный результат посылается на единственный выход. Такие искусственные нейроны объединяют в сети — соединяют выходы одних нейронов с входами других. Искусственные нейроны и сети являются основными элементами идеального нейрокомпьютера
Основные типы передаточных функций
Линейная передаточная функция. В искусственных нейронных сетях со слоистой структурой нейроны с передаточными функциями такого типа, как правило, составляют входной слой. Кроме простой линейной функции могут быть использованы её модификации. Например полулинейная функция (если её аргумент меньше нуля, то она равна нулю, а в остальных случаях, ведет себя как линейная) или шаговая (линейная функция с насыщением)
Пороговая передаточная функция. Другое название — функция Хевисайда. Представляет собой перепад. До тех пор пока взвешенный сигнал на входе нейрона не достигает некоторого уровня T — сигнал на выходе равен нулю. Как только сигнал на входе нейрона превышает указанный уровень — выходной сигнал скачкообразно изменяется на единицу. Самый первый представитель слоистых искусственных нейронных сетей — перцептрон[11] состоял исключительно из нейронов такого типа[5]. 
Сигмоидальная передаточная функция. Один из самых часто используемых, на данный момент, типов передаточных функций. Введение функций сигмоидального типа было обусловлено ограниченностью нейронных сетей с пороговой функцией активации нейронов — при такой функции активации любой из выходов сети равен либо нулю, либо единице, что ограничивает использование сетей не в задачах классификации. Использование сигмоидальных функций позволило перейти от бинарных выходов нейрона к аналоговым[12]. Функции передачи такого типа, как правило, присущи нейронам, находящимся во внутренних слоях нейронной сети.
Радиально-базисная функция передачи'''
				bot.send_message(mid, answer)

			elif 'olap' in mt:
				answer = '''
OLAP-сервер  Microsoft Analysis Services.

Оперативная аналитическая обработка (OLAP) — это технология, которая упорядочивает большие коммерческие базы данных и поддерживает сложный анализ. Ее можно использовать для выполнения сложных аналитических запросов без негативного воздействия на системы транзакций.
Microsoft Analysis Services (Службы анализа от Microsoft) - часть Microsoft SQL Server, системы управления базами данных (СУБД). Microsoft включила набор служб в SQL Server, связанных с бизнес-анализом и хранением данных. Эти службы включают в себя службы интеграции (Integration Services) и службы анализа (Analysis Services). Analysis Services, в свою очередь, включают в себя набор средств для работы с OLAP и интеллектуальным анализом данных.
Основным компонентом аналитических служб является Analysis Server — сервис операционной системы Windows NT/2000. Этот сервер предназначен для создания OLAP-кубов на основе реляционных хранилищ данных, а также для предоставления доступа к ним из клиентских приложений. Ниже мы рассмотрим, какими именно объектами манипулирует этот сервер и с помощью каких механизмов это происходит.'''
				bot.send_message(mid, answer)

			elif mt == 'метод':
				answer = '''
Метод резолюции

На данный вопрос пока нет ответа'''
				bot.send_message(mid, answer)

			elif mt == 'документ':
				doc = 'https://drive.google.com/file/d/1HwWSHBLR488ijZKoUFIM6iQSP75tTfAu/view?usp=drivesdk'
				bot.send_message(mid, doc)

			else:
				answer = name + ', тебе нужно написать только первое слово твоего вопроса. Не забудь правильно его написать. Чтобы получить документ с ответами, напиши "документ"'
				bot.send_message(mid, answer)
				ttt = str(mid) + ' ' + name + ' пишет: ' + mt
				bot.send_message(888833912, ttt)
				print(str(mid) + ' ' + name + ' пишет: ' + mt)

			if mid != 888833912:
				ggggg = str(mid) + ' ' + name + ' пишет: ' + mt
				bot.send_message(888833912, ggggg)


	@bot.callback_query_handler(func=lambda c:True)
	def inlin(c):
		if c.data == 'rassul4':
			zhopa = '''
Основные компоненты интеллектуальной информационной системы

На начальном этапе применения методов искусственного интеллекта к ИС наибольшее распространение получили экспертные системы (ЭС), т.е. компьютерные программы, имеющие дело с проблемами, для которых не существует непосредственно аналитических методов, но в которых они позволяют получить результаты. П
Компонента синтеза объяснения - это тип выходной информации, используемой, чтобы оправдать некоторые выдаваемые системой заключения и предоставить пользователю некоторые пояснения в форме, подходящей для интерпретации лицом, принимающим решения.
ЭС успешно применены в целом ряде областей, включая математику, геологию, проектирование и разработку систем. В последнее время ЭС стали очень широко применяться в области бизнеса, страхования и банковского дела. Основные составляющие ЭС:
База знаний. Служит для представления эвристической и фактологической информации, часто в форме фактов, утверждений и правил вывода.
Машина вывода. Механизм, играющий роль интерпретатора, применяющего знания подходящим образом, чтобы получить результат.
Система естественно-языкового интерфейса (СЕЯИ). Механизм, преобразующий запросы и выдающий ответы пользователю, иногда отыскивающий дополнительную информацию для машины вывода. Эта компонента включает средства, необходимые для взаимодействия ИИС с пользователем.'''
			bot.send_message(c.message.chat.id, zhopa)
		elif c.data == 'mad15':
			zhopa = '''
Основные определения нечетких множеств.

При помощи нечетких множеств можно формально определить неточные и многозначные понятия, такие как «высокая температура», «молодой человек», «средний рост» либо «большой город». Перед формулированием определения нечеткого множества необходимо задать так называемую область рассуждений (universe of discourse). В случае неоднозначного понятия «много денег» большой будет признаваться одна сумма, если мы ограничимся диапазоном [0, 1000 тг] и совсем другая - в диапазоне [0, 1000000 тг]. Область рассуждений, называемая в дальнейшем пространством или множеством, будет чаще всего обозначаться символом . Необходимо помнить, что  - четкое множество.
Нечетким подмножеством A на множестве U называется совокупность пар
A={<ma (u), u>} 
Где ma: U® [0,1] – отображение множества U в единичный отрезок [0,1], называемое функцией принадлежности нечеткого подмножества A.'''
			bot.send_message(c.message.chat.id, zhopa)
		elif c.data == 'aibyn18':
			zhopa = '''
Нейронные сети.

На данный вопрос пока нет ответа'''
			bot.send_message(c.message.chat.id, zhopa)
		elif c.data == 'aiym27':
			zhopa = '''
Нейронные сети и экспертные системы.

Это большой класс систем, архитектура которых имеет аналогию с построением нервной ткани из нейронов. В одной из наиболее распространенных архитектур - многослойном персептроне с обратным распространением ошибки - имитируется работа нейронов в составе иерархической сети, где каждый нейрон более высокого уровня соединен своими входами с выходами нейронов нижележащего слоя.
На нейроны самого нижнего слоя подаются значения входных параметров, на основе которых нужно принимать какие-то решения, прогнозировать развитие ситуации и т. д. Эти значения рассматриваются как сигналы, передающиеся в следующий слой, ослабляясь или усиливаясь в зависимости от числовых значений (весов), приписываемых межнейронным связям. В результате на выходе нейрона самого верхнего слоя вырабатывается некоторое значение, которое рассматривается как ответ - реакция всей сети на введенные значения входных параметров.
Для того чтобы сеть можно было применять в дальнейшем, ее прежде надо "натренировать" на полученных ранее данных, для которых известны и значения входных параметров, и правильные ответы на них. Тренировка состоит в подборе весов межнейронных связей, обеспечивающих наибольшую близость ответов сети к известным правильным ответам.
Экспертная система имеет разветвленную сеть, позволяющую делать запросы и глубокий поиск в базах данных и хранилищах знаний. Если нейронные сети работают на принципе передачи информации от одних слоев нейронов к другим, причем изменения информации, происходящие во время передачи, обусловлены заранее не оговоренными эвристическими правилами, то в экспертных системах существует жесткий логический каркас - создатель заключения, который автоматически проводит линию рассуждения по заложенным в алгоритм правилам и использует параметры, вовлеченные в решение.
Ответ может быть известен заранее по результатам отзывов специалистов-экспертов; этот ответ сопоставляется с ответом системы, параметры изменяются, и проводится второй "прогон". В результате выдается экспертное заключение с вероятностной оценкой его надежности. Интерфейс допускает работу сразу нескольких пользователей.'''
			bot.send_message(c.message.chat.id, zhopa)
		elif c.data == 'aiym28':
			zhopa1 = '''
Нейронные сети и нечеткая логика

Поскольку нечёткие множества описываются функциями принадлежности, а t-нормы и k-нормы обычными математическими операциями, можно представить нечёткие логические рассуждения в виде нейронной сети. Для этого функции принадлежности надо интерпретировать как функции активации нейронов, передачу сигналов как связи, а логические t-нормы и k-нормы, как специальные виды нейронов, выполняющие математические соответствующие операции. Существует большое разнообразие подобных нейро-нечётких сетей neuro-fuzzy network. Например, ANFIS (Adaptive Neuro fuzzy Inference System) — адаптивная нейро-нечеткая система вывода.
Она может быть описана в универсальной форме аппроксиматоров как'''
			image = 'https://sun9-51.userapi.com/c855424/v855424848/1ac744/miyOoFZBU5s.jpg'
			zhopa2 = '''
кроме того, этой формулой могут быть описаны также некоторые виды нейронных сетей, такие как радиально базисные сети (RBF), многослойные персептроны (MLP), а также вейвлеты и сплайны.'''
			bot.send_message(c.message.chat.id, zhopa1)
			time.sleep(0.1)
			bot.send_photo(c.message.chat.id, image)
			time.sleep(0.1)
			bot.send_message(c.message.chat.id, zhopa2)
		elif c.data == 'aibyn19':
			zhopa = '''
Методы вывода на основе прямой и обратной цепочек.

На данный вопрос пока нет ответа'''
			bot.send_message(c.message.chat.id, zhopa)
		elif c.data == 'aibyn21':
			zhopa = '''
Методы поиска решений в больших пространствах состояний.

На данный вопрос пока нет ответа'''
			bot.send_message(c.message.chat.id, zhopa)

	bot.polling(none_stop = True)
except:
	print('Что-то пошло не так')
